import "package:macro_processor/macro_processor.dart";

void main() {
  var processor = new MacroProcessor();
  var sw = new Stopwatch();
  sw.start();
  var blocks = processor.process(_header, {});
  sw.stop();
  var result = blocks.map((e) => e.text).join();
  print(result);
  print(sw.elapsedMilliseconds / 1000);
}

String _header = '''
BOOL ActivateActCtx(HANDLE hActCtx, ATOM lpCookie);
ATOM AddAtomA(LPCSTR lpString);
ATOM AddAtomW(LPCWSTR lpString);
BOOL AddConsoleAliasA(LPSTR Source, LPSTR Target, LPSTR ExeName);
BOOL AddConsoleAliasW(LPWSTR Source, LPWSTR Target, LPWSTR ExeName);
LONGLONG AddRefActCtx(HANDLE hActCtx);
PVOID AddVectoredExceptionHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
BOOL AllocConsole();
BOOL AllocateUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
BOOL AreFileApisANSI();
BOOL AssignProcessToJobObject(HANDLE hJob, HANDLE hProcess);
BOOL AttachConsole(DWORD dwProcessId);
BOOL BackupRead(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, BOOL bAbort, BOOL bProcessSecurity, HANDLE lpContext);
BOOL BackupSeek(HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, HANDLE lpContext);
BOOL BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, HANDLE lpContext);
BOOL Beep(DWORD dwFreq, DWORD dwDuration);
HANDLE BeginUpdateResourceA(LPCSTR pFileName, BOOL bDeleteExistingResources);
HANDLE BeginUpdateResourceW(LPCWSTR pFileName, BOOL bDeleteExistingResources);
BOOL BindIoCompletionCallback(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
BOOL BuildCommDCBA(LPCSTR lpDef, LPDCB lpDCB);
BOOL BuildCommDCBAndTimeoutsA(LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
BOOL BuildCommDCBAndTimeoutsW(LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
BOOL BuildCommDCBW(LPCWSTR lpDef, LPDCB lpDCB);
BOOL CallNamedPipeA(LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
BOOL CallNamedPipeW(LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
BOOL CancelDeviceWakeupRequest(HANDLE hDevice);
BOOL CancelIo(HANDLE hFile);
BOOL CancelTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer);
BOOL CancelWaitableTimer(HANDLE hTimer);
BOOL ChangeTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
BOOL CheckNameLegalDOS8Dot3A(LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
BOOL CheckNameLegalDOS8Dot3W(LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
BOOL CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent);
BOOL ClearCommBreak(HANDLE hFile);
BOOL ClearCommError(HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
BOOL CloseHandle(HANDLE hObject);
BOOL CommConfigDialogA(LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
BOOL CommConfigDialogW(LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
LONG CompareFileTime(POINTFX lpFileTime1, POINTFX lpFileTime2);
wchar_t CompareStringA(LCID Locale, DWORD dwCmpFlags, LPCSTR lpString1, wchar_t cchCount1, LPCSTR lpString2, wchar_t cchCount2);
wchar_t CompareStringW(LCID Locale, DWORD dwCmpFlags, LPCWSTR lpString1, wchar_t cchCount1, LPCWSTR lpString2, wchar_t cchCount2);
BOOL ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
BOOL ContinueDebugEvent(DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
LCID ConvertDefaultLocale(LCID Locale);
BOOL ConvertFiberToThread();
LPVOID ConvertThreadToFiber(LPVOID lpParameter);
BOOL CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists);
BOOL CopyFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
BOOL CopyFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
BOOL CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists);
LONG CopyLZFile(INT, INT);
HANDLE CreateActCtxA(PCACTCTXA pActCtx);
HANDLE CreateActCtxW(PCACTCTXW pActCtx);
HANDLE CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, ITypeInfo2Vtbl_GetAllVarCustData lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData);
BOOL CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
BOOL CreateDirectoryExA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
BOOL CreateDirectoryExW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
BOOL CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName);
HANDLE CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
LPVOID CreateFiber(SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
LPVOID CreateFiberEx(SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
HANDLE CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
HANDLE CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);
HANDLE CreateFileMappingW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
HANDLE CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
BOOL CreateHardLinkA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
BOOL CreateHardLinkW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
HANDLE CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
HANDLE CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
BOOL CreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
HANDLE CreateMailslotA(LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE CreateMailslotW(LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
HANDLE CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName);
HANDLE CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName);
HANDLE CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE CreateNamedPipeW(LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
BOOL CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
BOOL CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
BOOL CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
HANDLE CreateRemoteThread(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
HANDLE CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
HANDLE CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);
DWORD CreateTapePartition(HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
HANDLE CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
HANDLE CreateTimerQueue();
BOOL CreateTimerQueueTimer(PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
HANDLE CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCSTR lpTimerName);
HANDLE CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerName);
BOOL DeactivateActCtx(DWORD dwFlags, ULONG_PTR ulCookie);
BOOL DebugActiveProcess(DWORD dwProcessId);
BOOL DebugActiveProcessStop(DWORD dwProcessId);
LONGLONG DebugBreak();
BOOL DebugBreakProcess(HANDLE Process);
BOOL DebugSetProcessKillOnExit(BOOL KillOnExit);
PVOID DecodePointer(PVOID Ptr);
PVOID DecodeSystemPointer(PVOID Ptr);
BOOL DefineDosDeviceA(DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
BOOL DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
ATOM DeleteAtom(ATOM nAtom);
LONGLONG DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
LONGLONG DeleteFiber(LPVOID lpFiber);
BOOL DeleteFileA(LPCSTR lpFileName);
BOOL DeleteFileW(LPCWSTR lpFileName);
BOOL DeleteTimerQueue(HANDLE TimerQueue);
BOOL DeleteTimerQueueEx(HANDLE TimerQueue, HANDLE CompletionEvent);
BOOL DeleteTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);
BOOL DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint);
BOOL DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint);
BOOL DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
BOOL DisableThreadLibraryCalls(HMODULE hLibModule);
BOOL DisconnectNamedPipe(HANDLE hNamedPipe);
BOOL DnsHostnameToComputerNameA(LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
BOOL DnsHostnameToComputerNameW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
BOOL DosDateTimeToFileTime(WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
BOOL DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions);
PVOID EncodePointer(PVOID Ptr);
PVOID EncodeSystemPointer(PVOID Ptr);
BOOL EndUpdateResourceA(HANDLE hUpdate, BOOL fDiscard);
BOOL EndUpdateResourceW(HANDLE hUpdate, BOOL fDiscard);
LONGLONG EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
BOOL EnumCalendarInfoA(CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
BOOL EnumCalendarInfoExA(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
BOOL EnumCalendarInfoExW(CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
BOOL EnumCalendarInfoW(CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
BOOL EnumDateFormatsA(DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
BOOL EnumDateFormatsExA(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
BOOL EnumDateFormatsExW(DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
BOOL EnumDateFormatsW(DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
BOOL EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
BOOL EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
BOOL EnumResourceLanguagesA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
BOOL EnumResourceLanguagesW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
BOOL EnumResourceNamesA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
BOOL EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
BOOL EnumResourceTypesA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
BOOL EnumResourceTypesW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
BOOL EnumSystemCodePagesA(CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
BOOL EnumSystemCodePagesW(CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);
BOOL EnumSystemGeoID(GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);
BOOL EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
BOOL EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
BOOL EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);
BOOL EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);
BOOL EnumTimeFormatsA(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
BOOL EnumTimeFormatsW(TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
BOOL EnumUILanguagesA(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
BOOL EnumUILanguagesW(UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
DWORD EraseTape(HANDLE hDevice, DWORD dwEraseType, BOOL bImmediate);
BOOL EscapeCommFunction(HANDLE hFile, DWORD dwFunc);
LONGLONG ExitProcess(UINT uExitCode);
LONGLONG ExitThread(DWORD dwExitCode);
DWORD ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
DWORD ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
LONGLONG FatalAppExitA(UINT uAction, LPCSTR lpMessageText);
LONGLONG FatalAppExitW(UINT uAction, LPCWSTR lpMessageText);
LONGLONG FatalExit(wchar_t ExitCode);
BOOL FileTimeToDosDateTime(POINTFX lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
BOOL FileTimeToLocalFileTime(POINTFX lpFileTime, LPFILETIME lpLocalFileTime);
BOOL FileTimeToSystemTime(POINTFX lpFileTime, LPSYSTEMTIME lpSystemTime);
BOOL FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
BOOL FillConsoleOutputCharacterA(HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
BOOL FillConsoleOutputCharacterW(HANDLE hConsoleOutput, WCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
BOOL FindActCtxSectionGuid(DWORD dwFlags, MOUSEINPUT lpExtensionGuid, ULONG ulSectionId, MOUSEINPUT lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
BOOL FindActCtxSectionStringA(DWORD dwFlags, MOUSEINPUT lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
BOOL FindActCtxSectionStringW(DWORD dwFlags, MOUSEINPUT lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
ATOM FindAtomA(LPCSTR lpString);
ATOM FindAtomW(LPCWSTR lpString);
BOOL FindClose(HANDLE hFindFile);
BOOL FindCloseChangeNotification(HANDLE hChangeHandle);
HANDLE FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter);
HANDLE FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter);
HANDLE FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
HANDLE FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
HANDLE FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
HANDLE FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
HANDLE FindFirstVolumeA(LPSTR lpszVolumeName, DWORD cchBufferLength);
HANDLE FindFirstVolumeMountPointA(LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
HANDLE FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
HANDLE FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength);
BOOL FindNextChangeNotification(HANDLE hChangeHandle);
BOOL FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
BOOL FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
BOOL FindNextVolumeA(HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
BOOL FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
BOOL FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
BOOL FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
HRSRC FindResourceA(HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
HRSRC FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
HRSRC FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
HRSRC FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
BOOL FindVolumeClose(HANDLE hFindVolume);
BOOL FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint);
BOOL FlushConsoleInputBuffer(HANDLE hConsoleInput);
BOOL FlushFileBuffers(HANDLE hFile);
BOOL FlushInstructionCache(HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
BOOL FlushViewOfFile(LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
wchar_t FoldStringA(DWORD dwMapFlags, LPCSTR lpSrcStr, wchar_t cchSrc, LPSTR lpDestStr, wchar_t cchDest);
wchar_t FoldStringW(DWORD dwMapFlags, LPCWSTR lpSrcStr, wchar_t cchSrc, LPWSTR lpDestStr, wchar_t cchDest);
DWORD FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, ITypeInfoVtbl_AddRef Arguments);
DWORD FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, ITypeInfoVtbl_AddRef Arguments);
BOOL FreeConsole();
BOOL FreeEnvironmentStringsA(LPCH);
BOOL FreeEnvironmentStringsW(LPWCH);
BOOL FreeLibrary(HMODULE hLibModule);
LONGLONG FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode);
BOOL FreeResource(HGLOBAL hResData);
BOOL FreeUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
BOOL GenerateConsoleCtrlEvent(DWORD dwCtrlEvent, DWORD dwProcessGroupId);
UINT GetACP();
UINT GetAtomNameA(ATOM nAtom, LPSTR lpBuffer, wchar_t nSize);
UINT GetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, wchar_t nSize);
BOOL GetBinaryTypeA(LPCSTR lpApplicationName, LPDWORD lpBinaryType);
BOOL GetBinaryTypeW(LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
BOOL GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo);
BOOL GetCPInfoExA(UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);
BOOL GetCPInfoExW(UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);
wchar_t GetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, wchar_t cchData, LPDWORD lpValue);
wchar_t GetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, wchar_t cchData, LPDWORD lpValue);
BOOL GetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
BOOL GetCommMask(HANDLE hFile, LPDWORD lpEvtMask);
BOOL GetCommModemStatus(HANDLE hFile, LPDWORD lpModemStat);
BOOL GetCommProperties(HANDLE hFile, LPCOMMPROP lpCommProp);
BOOL GetCommState(HANDLE hFile, LPDCB lpDCB);
BOOL GetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
LPSTR GetCommandLineA();
LPWSTR GetCommandLineW();
DWORD GetCompressedFileSizeA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
DWORD GetCompressedFileSizeW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);
BOOL GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize);
BOOL GetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
BOOL GetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
BOOL GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize);
DWORD GetConsoleAliasA(LPSTR Source, LPSTR TargetBuffer, DWORD TargetBufferLength, LPSTR ExeName);
DWORD GetConsoleAliasExesA(LPSTR ExeNameBuffer, DWORD ExeNameBufferLength);
DWORD GetConsoleAliasExesLengthA();
DWORD GetConsoleAliasExesLengthW();
DWORD GetConsoleAliasExesW(LPWSTR ExeNameBuffer, DWORD ExeNameBufferLength);
DWORD GetConsoleAliasW(LPWSTR Source, LPWSTR TargetBuffer, DWORD TargetBufferLength, LPWSTR ExeName);
DWORD GetConsoleAliasesA(LPSTR AliasBuffer, DWORD AliasBufferLength, LPSTR ExeName);
DWORD GetConsoleAliasesLengthA(LPSTR ExeName);
DWORD GetConsoleAliasesLengthW(LPWSTR ExeName);
DWORD GetConsoleAliasesW(LPWSTR AliasBuffer, DWORD AliasBufferLength, LPWSTR ExeName);
UINT GetConsoleCP();
BOOL GetConsoleCursorInfo(HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
BOOL GetConsoleDisplayMode(LPDWORD lpModeFlags);
COORD GetConsoleFontSize(HANDLE hConsoleOutput, DWORD nFont);
BOOL GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode);
UINT GetConsoleOutputCP();
DWORD GetConsoleProcessList(LPDWORD lpdwProcessList, DWORD dwProcessCount);
BOOL GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
BOOL GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
DWORD GetConsoleTitleA(LPSTR lpConsoleTitle, DWORD nSize);
DWORD GetConsoleTitleW(LPWSTR lpConsoleTitle, DWORD nSize);
HWND GetConsoleWindow();
wchar_t GetCurrencyFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, ITypeInfo2Vtbl_GetParamCustData lpFormat, LPSTR lpCurrencyStr, wchar_t cchCurrency);
wchar_t GetCurrencyFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, ITypeInfo2Vtbl_GetVarCustData lpFormat, LPWSTR lpCurrencyStr, wchar_t cchCurrency);
BOOL GetCurrentActCtx(Anonymous_79fe9041_6876_475e_b93a_ffb0d7822836 lphActCtx);
BOOL GetCurrentConsoleFont(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFO lpConsoleCurrentFont);
DWORD GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
DWORD GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
HANDLE GetCurrentProcess();
DWORD GetCurrentProcessId();
HANDLE GetCurrentThread();
DWORD GetCurrentThreadId();
wchar_t GetDateFormatA(LCID Locale, DWORD dwFlags, ITypeLib lpDate, LPCSTR lpFormat, LPSTR lpDateStr, wchar_t cchDate);
wchar_t GetDateFormatW(LCID Locale, DWORD dwFlags, ITypeLib lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, wchar_t cchDate);
BOOL GetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
BOOL GetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
BOOL GetDevicePowerState(HANDLE hDevice, SEC_WINNT_AUTH_IDENTITY_A pfOn);
BOOL GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
BOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
BOOL GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
BOOL GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
DWORD GetDllDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
DWORD GetDllDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
UINT GetDriveTypeA(LPCSTR lpRootPathName);
UINT GetDriveTypeW(LPCWSTR lpRootPathName);
LPCH GetEnvironmentStrings();
LPWCH GetEnvironmentStringsW();
DWORD GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
DWORD GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
BOOL GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode);
BOOL GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode);
INT GetExpandedNameA(LPSTR, LPSTR);
INT GetExpandedNameW(LPWSTR, LPWSTR);
DWORD GetFileAttributesA(LPCSTR lpFileName);
BOOL GetFileAttributesExA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
BOOL GetFileAttributesExW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
DWORD GetFileAttributesW(LPCWSTR lpFileName);
BOOL GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
DWORD GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);
BOOL GetFileSizeEx(HANDLE hFile, PLARGE_INTEGER lpFileSize);
BOOL GetFileTime(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
DWORD GetFileType(HANDLE hFile);
DWORD GetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
DWORD GetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
DWORD GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, JOBOBJECT_BASIC_LIMIT_INFORMATION lpFilePart);
DWORD GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, IMAGE_FILE_HEADER lpFilePart);
wchar_t GetGeoInfoA(GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, wchar_t cchData, LANGID LangId);
wchar_t GetGeoInfoW(GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, wchar_t cchData, LANGID LangId);
BOOL GetHandleInformation(HANDLE hObject, LPDWORD lpdwFlags);
COORD GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
DWORD GetLastError();
LONGLONG GetLocalTime(LPSYSTEMTIME lpSystemTime);
wchar_t GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, wchar_t cchData);
wchar_t GetLocaleInfoW(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, wchar_t cchData);
DWORD GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer);
DWORD GetLogicalDriveStringsW(DWORD nBufferLength, LPWSTR lpBuffer);
DWORD GetLogicalDrives();
DWORD GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
DWORD GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
BOOL GetMailslotInfo(HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
DWORD GetModuleFileNameA(HMODULE hModule, LPCH lpFilename, DWORD nSize);
DWORD GetModuleFileNameW(HMODULE hModule, LPWCH lpFilename, DWORD nSize);
HMODULE GetModuleHandleA(LPCSTR lpModuleName);
BOOL GetModuleHandleExA(DWORD dwFlags, LPCSTR lpModuleName, ULONGLONG phModule);
BOOL GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, ULONGLONG phModule);
HMODULE GetModuleHandleW(LPCWSTR lpModuleName);
BOOL GetNamedPipeHandleStateA(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
BOOL GetNamedPipeHandleStateW(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
BOOL GetNamedPipeInfo(HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
LONGLONG GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo);
BOOL GetNumaAvailableMemoryNode(UCHAR Node, PULONGLONG AvailableBytes);
BOOL GetNumaHighestNodeNumber(PULONG HighestNodeNumber);
BOOL GetNumaNodeProcessorMask(UCHAR Node, PULONGLONG ProcessorMask);
BOOL GetNumaProcessorNode(UCHAR Processor, PUCHAR NodeNumber);
wchar_t GetNumberFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, ITypeInfo2Vtbl_GetCustData lpFormat, LPSTR lpNumberStr, wchar_t cchNumber);
wchar_t GetNumberFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, ITypeInfo2Vtbl_GetFuncCustData lpFormat, LPWSTR lpNumberStr, wchar_t cchNumber);
BOOL GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpNumberOfEvents);
BOOL GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
UINT GetOEMCP();
BOOL GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait);
DWORD GetPriorityClass(HANDLE hProcess);
UINT GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
UINT GetPrivateProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
DWORD GetPrivateProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
DWORD GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
DWORD GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
DWORD GetPrivateProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
DWORD GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
DWORD GetPrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
BOOL GetPrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
BOOL GetPrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
FARPROC GetProcAddress(HMODULE hModule, LPCSTR lpProcName);
BOOL GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
BOOL GetProcessHandleCount(HANDLE hProcess, PDWORD pdwHandleCount);
HANDLE GetProcessHeap();
DWORD GetProcessHeaps(DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
DWORD GetProcessId(HANDLE Process);
BOOL GetProcessIoCounters(HANDLE hProcess, PIO_COUNTERS lpIoCounters);
BOOL GetProcessPriorityBoost(HANDLE hProcess, PBOOL pDisablePriorityBoost);
BOOL GetProcessShutdownParameters(LPDWORD lpdwLevel, LPDWORD lpdwFlags);
BOOL GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
DWORD GetProcessVersion(DWORD ProcessId);
BOOL GetProcessWorkingSetSize(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
UINT GetProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
UINT GetProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
DWORD GetProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
DWORD GetProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
DWORD GetProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
DWORD GetProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
BOOL GetQueuedCompletionStatus(HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, ITypeCompVtbl_BindType lpOverlapped, DWORD dwMilliseconds);
DWORD GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);
DWORD GetShortPathNameW(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
LONGLONG GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo);
LONGLONG GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo);
HANDLE GetStdHandle(DWORD nStdHandle);
BOOL GetStringTypeA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, wchar_t cchSrc, LPWORD lpCharType);
BOOL GetStringTypeExA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, wchar_t cchSrc, LPWORD lpCharType);
BOOL GetStringTypeExW(LCID Locale, DWORD dwInfoType, LPCWSTR lpSrcStr, wchar_t cchSrc, LPWORD lpCharType);
BOOL GetStringTypeW(DWORD dwInfoType, LPCWSTR lpSrcStr, wchar_t cchSrc, LPWORD lpCharType);
LCID GetSystemDefaultLCID();
LANGID GetSystemDefaultLangID();
LANGID GetSystemDefaultUILanguage();
UINT GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize);
UINT GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize);
LONGLONG GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
BOOL GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
BOOL GetSystemRegistryQuota(PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
LONGLONG GetSystemTime(LPSYSTEMTIME lpSystemTime);
BOOL GetSystemTimeAdjustment(PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
LONGLONG GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
BOOL GetSystemTimes(LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
UINT GetSystemWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
UINT GetSystemWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
UINT GetSystemWow64DirectoryA(LPSTR lpBuffer, UINT uSize);
UINT GetSystemWow64DirectoryW(LPWSTR lpBuffer, UINT uSize);
DWORD GetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
DWORD GetTapePosition(HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
DWORD GetTapeStatus(HANDLE hDevice);
UINT GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);
UINT GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
DWORD GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer);
DWORD GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer);
BOOL GetThreadContext(HANDLE hThread, LPCONTEXT lpContext);
BOOL GetThreadIOPendingFlag(HANDLE hThread, PBOOL lpIOIsPending);
LCID GetThreadLocale();
wchar_t GetThreadPriority(HANDLE hThread);
BOOL GetThreadPriorityBoost(HANDLE hThread, PBOOL pDisablePriorityBoost);
BOOL GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
BOOL GetThreadTimes(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
DWORD GetTickCount();
wchar_t GetTimeFormatA(LCID Locale, DWORD dwFlags, ITypeLib lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, wchar_t cchTime);
wchar_t GetTimeFormatW(LCID Locale, DWORD dwFlags, ITypeLib lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, wchar_t cchTime);
DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
LCID GetUserDefaultLCID();
LANGID GetUserDefaultLangID();
LANGID GetUserDefaultUILanguage();
GEOID GetUserGeoID(GEOCLASS GeoClass);
DWORD GetVersion();
BOOL GetVersionExA(LPOSVERSIONINFOA lpVersionInformation);
BOOL GetVersionExW(LPOSVERSIONINFOW lpVersionInformation);
BOOL GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
BOOL GetVolumeInformationW(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
BOOL GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
BOOL GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
BOOL GetVolumePathNameA(LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
BOOL GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
BOOL GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
BOOL GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
UINT GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
UINT GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
UINT GetWriteWatch(DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PCERT_ID lpAddresses, ATOM lpdwCount, PULONG lpdwGranularity);
ATOM GlobalAddAtomA(LPCSTR lpString);
ATOM GlobalAddAtomW(LPCWSTR lpString);
HGLOBAL GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
SIZE_T GlobalCompact(DWORD dwMinFree);
ATOM GlobalDeleteAtom(ATOM nAtom);
ATOM GlobalFindAtomA(LPCSTR lpString);
ATOM GlobalFindAtomW(LPCWSTR lpString);
LONGLONG GlobalFix(HGLOBAL hMem);
UINT GlobalFlags(HGLOBAL hMem);
HGLOBAL GlobalFree(HGLOBAL hMem);
UINT GlobalGetAtomNameA(ATOM nAtom, LPSTR lpBuffer, wchar_t nSize);
UINT GlobalGetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, wchar_t nSize);
HGLOBAL GlobalHandle(LPCVOID pMem);
LPVOID GlobalLock(HGLOBAL hMem);
LONGLONG GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer);
BOOL GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer);
HGLOBAL GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
SIZE_T GlobalSize(HGLOBAL hMem);
BOOL GlobalUnWire(HGLOBAL hMem);
LONGLONG GlobalUnfix(HGLOBAL hMem);
BOOL GlobalUnlock(HGLOBAL hMem);
LPVOID GlobalWire(HGLOBAL hMem);
LPVOID HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
SIZE_T HeapCompact(HANDLE hHeap, DWORD dwFlags);
HANDLE HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
BOOL HeapDestroy(HANDLE hHeap);
BOOL HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
BOOL HeapLock(HANDLE hHeap);
BOOL HeapQueryInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
LPVOID HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
BOOL HeapSetInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
SIZE_T HeapSize(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
BOOL HeapUnlock(HANDLE hHeap);
BOOL HeapValidate(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
BOOL HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
BOOL InitAtomTable(DWORD nSize);
LONGLONG InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
BOOL InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
LONGLONG InitializeSListHead(PSLIST_HEADER ListHead);
LONG InterlockedCompareExchange(LPMIXERCONTROLW Destination, LONG Exchange, LONG Comperand);
LONG InterlockedDecrement(LPMIXERCONTROLW lpAddend);
LONG InterlockedExchange(LPMIXERCONTROLW Target, LONG Value);
LONG InterlockedExchangeAdd(LPMIXERCONTROLW Addend, LONG Value);
PSINGLE_LIST_ENTRY InterlockedFlushSList(PSLIST_HEADER ListHead);
LONG InterlockedIncrement(LPMIXERCONTROLW lpAddend);
PSINGLE_LIST_ENTRY InterlockedPopEntrySList(PSLIST_HEADER ListHead);
PSINGLE_LIST_ENTRY InterlockedPushEntrySList(PSLIST_HEADER ListHead, PSINGLE_LIST_ENTRY ListEntry);
BOOL IsBadCodePtr(FARPROC lpfn);
BOOL IsBadHugeReadPtr(PVOID64 lp, UINT_PTR ucb);
BOOL IsBadHugeWritePtr(LPVOID lp, UINT_PTR ucb);
BOOL IsBadReadPtr(PVOID64 lp, UINT_PTR ucb);
BOOL IsBadStringPtrA(LPCSTR lpsz, UINT_PTR ucchMax);
BOOL IsBadStringPtrW(LPCWSTR lpsz, UINT_PTR ucchMax);
BOOL IsBadWritePtr(LPVOID lp, UINT_PTR ucb);
BOOL IsDBCSLeadByte(BYTE TestChar);
BOOL IsDBCSLeadByteEx(UINT CodePage, BYTE TestChar);
BOOL IsDebuggerPresent();
BOOL IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);
BOOL IsProcessorFeaturePresent(DWORD ProcessorFeature);
BOOL IsSystemResumeAutomatic();
BOOL IsValidCodePage(UINT CodePage);
BOOL IsValidLanguageGroup(LGRPID LanguageGroup, DWORD dwFlags);
BOOL IsValidLocale(LCID Locale, DWORD dwFlags);
BOOL IsWow64Process(HANDLE hProcess, PBOOL Wow64Process);
wchar_t LCMapStringA(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, wchar_t cchSrc, LPSTR lpDestStr, wchar_t cchDest);
wchar_t LCMapStringW(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, wchar_t cchSrc, LPWSTR lpDestStr, wchar_t cchDest);
LONGLONG LZClose(INT);
LONG LZCopy(INT, INT);
LONGLONG LZDone();
INT LZInit(INT);
INT LZOpenFileA(LPSTR, LPOFSTRUCT, WORD);
INT LZOpenFileW(LPWSTR, LPOFSTRUCT, WORD);
INT LZRead(INT, LPSTR, INT);
LONG LZSeek(INT, LONG, INT);
INT LZStart();
LONGLONG LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
HMODULE LoadLibraryA(LPCSTR lpLibFileName);
HMODULE LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
HMODULE LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
HMODULE LoadLibraryW(LPCWSTR lpLibFileName);
DWORD LoadModule(LPCSTR lpModuleName, LPVOID lpParameterBlock);
HGLOBAL LoadResource(HMODULE hModule, HRSRC hResInfo);
HLOCAL LocalAlloc(UINT uFlags, SIZE_T uBytes);
SIZE_T LocalCompact(UINT uMinFree);
BOOL LocalFileTimeToFileTime(POINTFX lpLocalFileTime, LPFILETIME lpFileTime);
UINT LocalFlags(HLOCAL hMem);
HLOCAL LocalFree(HLOCAL hMem);
HLOCAL LocalHandle(LPCVOID pMem);
LPVOID LocalLock(HLOCAL hMem);
HLOCAL LocalReAlloc(HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
SIZE_T LocalShrink(HLOCAL hMem, UINT cbNewSize);
SIZE_T LocalSize(HLOCAL hMem);
BOOL LocalUnlock(HLOCAL hMem);
BOOL LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
BOOL LockFileEx(HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
LPVOID LockResource(HGLOBAL hResData);
BOOL MapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
BOOL MapUserPhysicalPagesScatter(PCERT_ID VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
LPVOID MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
LPVOID MapViewOfFileEx(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
BOOL MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
BOOL MoveFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
BOOL MoveFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);
BOOL MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);
BOOL MoveFileWithProgressA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
BOOL MoveFileWithProgressW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
wchar_t MulDiv(wchar_t nNumber, wchar_t nNumerator, wchar_t nDenominator);
wchar_t MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, wchar_t cbMultiByte, LPWSTR lpWideCharStr, wchar_t cchWideChar);
HANDLE OpenEventA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
HANDLE OpenEventW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
HFILE OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
HANDLE OpenFileMappingA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
HANDLE OpenFileMappingW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
HANDLE OpenJobObjectA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
HANDLE OpenJobObjectW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
HANDLE OpenMutexA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
HANDLE OpenMutexW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
HANDLE OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
HANDLE OpenSemaphoreA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
HANDLE OpenSemaphoreW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
HANDLE OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
HANDLE OpenWaitableTimerA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpTimerName);
HANDLE OpenWaitableTimerW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpTimerName);
LONGLONG OutputDebugStringA(LPCSTR lpOutputString);
LONGLONG OutputDebugStringW(LPCWSTR lpOutputString);
BOOL PeekConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
BOOL PeekConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
BOOL PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
BOOL PostQueuedCompletionStatus(HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
DWORD PrepareTape(HANDLE hDevice, DWORD dwOperation, BOOL bImmediate);
BOOL ProcessIdToSessionId(DWORD dwProcessId, ACCESS_MASK pSessionId);
BOOL PulseEvent(HANDLE hEvent);
BOOL PurgeComm(HANDLE hFile, DWORD dwFlags);
BOOL QueryActCtxW(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, struct _LIST_ENTRY pcbWrittenOrRequired);
USHORT QueryDepthSList(PSLIST_HEADER ListHead);
DWORD QueryDosDeviceA(LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);
DWORD QueryDosDeviceW(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
BOOL QueryInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
BOOL QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle, PBOOL ResourceState);
BOOL QueryPerformanceCounter(DETECTION_TYPE lpPerformanceCount);
BOOL QueryPerformanceFrequency(DETECTION_TYPE lpFrequency);
DWORD QueueUserAPC(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
BOOL QueueUserWorkItem(LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
LONGLONG RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, ITypeCompVtbl_Bind lpArguments);
BOOL ReadConsoleA(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID lpReserved);
BOOL ReadConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
BOOL ReadConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
BOOL ReadConsoleOutputA(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
BOOL ReadConsoleOutputAttribute(HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead);
BOOL ReadConsoleOutputCharacterA(HANDLE hConsoleOutput, LPSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
BOOL ReadConsoleOutputCharacterW(HANDLE hConsoleOutput, LPWSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
BOOL ReadConsoleOutputW(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
BOOL ReadConsoleW(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID lpReserved);
BOOL ReadDirectoryChangesW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
BOOL ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
BOOL ReadFileEx(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
BOOL ReadFileScatter(HANDLE hFile, ITypeInfoVtbl_Release aSegmentArray, DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
BOOL ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, struct _LIST_ENTRY lpNumberOfBytesRead);
BOOL RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
HANDLE RegisterWaitForSingleObjectEx(HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
LONGLONG ReleaseActCtx(HANDLE hActCtx);
BOOL ReleaseMutex(HANDLE hMutex);
BOOL ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
BOOL RemoveDirectoryA(LPCSTR lpPathName);
BOOL RemoveDirectoryW(LPCWSTR lpPathName);
ULONG RemoveVectoredExceptionHandler(PVOID Handle);
BOOL ReplaceFileA(LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
BOOL ReplaceFileW(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
BOOL RequestDeviceWakeup(HANDLE hDevice);
BOOL RequestWakeupLatency(LATENCY_TIME latency);
BOOL ResetEvent(HANDLE hEvent);
UINT ResetWriteWatch(LPVOID lpBaseAddress, SIZE_T dwRegionSize);
DWORD ResumeThread(HANDLE hThread);
LONGLONG RtlCaptureContext(PCONTEXT ContextRecord);
BOOL ScrollConsoleScreenBufferA(HANDLE hConsoleOutput, ITypeInfo2Vtbl_GetAllParamCustData lpScrollRectangle, ITypeInfo2Vtbl_GetAllParamCustData lpClipRectangle, COORD dwDestinationOrigin, ITypeInfo2Vtbl_GetDocumentation2 lpFill);
BOOL ScrollConsoleScreenBufferW(HANDLE hConsoleOutput, ITypeInfo2Vtbl_GetAllParamCustData lpScrollRectangle, ITypeInfo2Vtbl_GetAllParamCustData lpClipRectangle, COORD dwDestinationOrigin, ITypeInfo2Vtbl_GetDocumentation2 lpFill);
DWORD SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, JOBOBJECT_BASIC_LIMIT_INFORMATION lpFilePart);
DWORD SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, IMAGE_FILE_HEADER lpFilePart);
BOOL SetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);
BOOL SetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);
BOOL SetCommBreak(HANDLE hFile);
BOOL SetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
BOOL SetCommMask(HANDLE hFile, DWORD dwEvtMask);
BOOL SetCommState(HANDLE hFile, LPDCB lpDCB);
BOOL SetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
BOOL SetComputerNameA(LPCSTR lpComputerName);
BOOL SetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer);
BOOL SetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
BOOL SetComputerNameW(LPCWSTR lpComputerName);
BOOL SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
BOOL SetConsoleCP(UINT wCodePageID);
BOOL SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add);
BOOL SetConsoleCursorInfo(HANDLE hConsoleOutput, ITypeInfo2Vtbl_GetAllFuncCustData lpConsoleCursorInfo);
BOOL SetConsoleCursorPosition(HANDLE hConsoleOutput, COORD dwCursorPosition);
BOOL SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode);
BOOL SetConsoleOutputCP(UINT wCodePageID);
BOOL SetConsoleScreenBufferSize(HANDLE hConsoleOutput, COORD dwSize);
BOOL SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes);
BOOL SetConsoleTitleA(LPCSTR lpConsoleTitle);
BOOL SetConsoleTitleW(LPCWSTR lpConsoleTitle);
BOOL SetConsoleWindowInfo(HANDLE hConsoleOutput, BOOL bAbsolute, ITypeInfo2Vtbl_GetAllParamCustData lpConsoleWindow);
DWORD SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
BOOL SetCurrentDirectoryA(LPCSTR lpPathName);
BOOL SetCurrentDirectoryW(LPCWSTR lpPathName);
BOOL SetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
BOOL SetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
BOOL SetDllDirectoryA(LPCSTR lpPathName);
BOOL SetDllDirectoryW(LPCWSTR lpPathName);
BOOL SetEndOfFile(HANDLE hFile);
BOOL SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue);
BOOL SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue);
UINT SetErrorMode(UINT uMode);
BOOL SetEvent(HANDLE hEvent);
LONGLONG SetFileApisToANSI();
LONGLONG SetFileApisToOEM();
BOOL SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes);
BOOL SetFileAttributesW(LPCWSTR lpFileName, DWORD dwFileAttributes);
DWORD SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
BOOL SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
BOOL SetFileShortNameA(HANDLE hFile, LPCSTR lpShortName);
BOOL SetFileShortNameW(HANDLE hFile, LPCWSTR lpShortName);
BOOL SetFileTime(HANDLE hFile, POINTFX lpCreationTime, POINTFX lpLastAccessTime, POINTFX lpLastWriteTime);
BOOL SetFileValidData(HANDLE hFile, LONGLONG ValidDataLength);
BOOL SetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
BOOL SetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
UINT SetHandleCount(UINT uNumber);
BOOL SetHandleInformation(HANDLE hObject, DWORD dwMask, DWORD dwFlags);
BOOL SetInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
LONGLONG SetLastError(DWORD dwErrCode);
BOOL SetLocalTime(ITypeLib lpSystemTime);
BOOL SetLocaleInfoA(LCID Locale, LCTYPE LCType, LPCSTR lpLCData);
BOOL SetLocaleInfoW(LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);
BOOL SetMailslotInfo(HANDLE hMailslot, DWORD lReadTimeout);
BOOL SetMessageWaitingIndicator(HANDLE hMsgIndicator, ULONG ulMsgCount);
BOOL SetNamedPipeHandleState(HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
BOOL SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass);
BOOL SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
BOOL SetProcessPriorityBoost(HANDLE hProcess, BOOL bDisablePriorityBoost);
BOOL SetProcessShutdownParameters(DWORD dwLevel, DWORD dwFlags);
BOOL SetProcessWorkingSetSize(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
BOOL SetStdHandle(DWORD nStdHandle, HANDLE hHandle);
BOOL SetSystemPowerState(BOOL fSuspend, BOOL fForce);
BOOL SetSystemTime(ITypeLib lpSystemTime);
BOOL SetSystemTimeAdjustment(DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled);
DWORD SetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
DWORD SetTapePosition(HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, BOOL bImmediate);
DWORD_PTR SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask);
BOOL SetThreadContext(HANDLE hThread, struct ITypeCompVtbl lpContext);
EXECUTION_STATE SetThreadExecutionState(EXECUTION_STATE esFlags);
DWORD SetThreadIdealProcessor(HANDLE hThread, DWORD dwIdealProcessor);
BOOL SetThreadLocale(LCID Locale);
BOOL SetThreadPriority(HANDLE hThread, wchar_t nPriority);
BOOL SetThreadPriorityBoost(HANDLE hThread, BOOL bDisablePriorityBoost);
BOOL SetTimeZoneInformation(ITypeInfoVtbl_QueryInterface lpTimeZoneInformation);
HANDLE SetTimerQueueTimer(HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, BOOL PreferIo);
LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
BOOL SetUserGeoID(GEOID GeoId);
BOOL SetVolumeLabelA(LPCSTR lpRootPathName, LPCSTR lpVolumeName);
BOOL SetVolumeLabelW(LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
BOOL SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
BOOL SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
BOOL SetWaitableTimer(HANDLE hTimer, ITypeInfoVtbl_GetTypeAttr lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, BOOL fResume);
BOOL SetupComm(HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
DWORD SignalObjectAndWait(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable);
DWORD SizeofResource(HMODULE hModule, HRSRC hResInfo);
LONGLONG Sleep(DWORD dwMilliseconds);
DWORD SleepEx(DWORD dwMilliseconds, BOOL bAlertable);
DWORD SuspendThread(HANDLE hThread);
LONGLONG SwitchToFiber(LPVOID lpFiber);
BOOL SwitchToThread();
BOOL SystemTimeToFileTime(ITypeLib lpSystemTime, LPFILETIME lpFileTime);
BOOL SystemTimeToTzSpecificLocalTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation, LPSYSTEMTIME lpUniversalTime, LPSYSTEMTIME lpLocalTime);
BOOL TerminateJobObject(HANDLE hJob, UINT uExitCode);
BOOL TerminateProcess(HANDLE hProcess, UINT uExitCode);
BOOL TerminateThread(HANDLE hThread, DWORD dwExitCode);
DWORD TlsAlloc();
BOOL TlsFree(DWORD dwTlsIndex);
LPVOID TlsGetValue(DWORD dwTlsIndex);
BOOL TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue);
BOOL TransactNamedPipe(HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
BOOL TransmitCommChar(HANDLE hFile, pthreadmbcinfo cChar);
BOOL TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
BOOL TzSpecificLocalTimeToSystemTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation, LPSYSTEMTIME lpLocalTime, LPSYSTEMTIME lpUniversalTime);
LONG UnhandledExceptionFilter(Anonymous_da3d5bb2_d7f6_4b49_a86f_df044e26e59a ExceptionInfo);
BOOL UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
BOOL UnlockFileEx(HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
BOOL UnmapViewOfFile(LPCVOID lpBaseAddress);
BOOL UnregisterWait(HANDLE WaitHandle);
BOOL UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent);
BOOL UpdateResourceA(HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
BOOL UpdateResourceW(HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
DWORD VerLanguageNameA(DWORD wLang, LPSTR szLang, DWORD nSize);
DWORD VerLanguageNameW(DWORD wLang, LPWSTR szLang, DWORD nSize);
ULONGLONG VerSetConditionMask(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition);
BOOL VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
BOOL VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
LPVOID VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
LPVOID VirtualAllocEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
BOOL VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
BOOL VirtualFreeEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
BOOL VirtualLock(LPVOID lpAddress, SIZE_T dwSize);
BOOL VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
BOOL VirtualProtectEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
SIZE_T VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
SIZE_T VirtualQueryEx(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
BOOL VirtualUnlock(LPVOID lpAddress, SIZE_T dwSize);
DWORD WTSGetActiveConsoleSessionId();
BOOL WaitCommEvent(HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
BOOL WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
DWORD WaitForMultipleObjects(DWORD nCount, TYPEATTR lpHandles, BOOL bWaitAll, DWORD dwMilliseconds);
DWORD WaitForMultipleObjectsEx(DWORD nCount, TYPEATTR lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable);
DWORD WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds);
DWORD WaitForSingleObjectEx(HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable);
BOOL WaitNamedPipeA(LPCSTR lpNamedPipeName, DWORD nTimeOut);
BOOL WaitNamedPipeW(LPCWSTR lpNamedPipeName, DWORD nTimeOut);
wchar_t WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, wchar_t cchWideChar, LPSTR lpMultiByteStr, wchar_t cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar);
UINT WinExec(LPCSTR lpCmdLine, UINT uCmdShow);
BOOL WriteConsoleA(HANDLE hConsoleOutput, PVOID64 lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
BOOL WriteConsoleInputA(HANDLE hConsoleInput, ITypeInfo2Vtbl_GetImplTypeCustData lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
BOOL WriteConsoleInputW(HANDLE hConsoleInput, ITypeInfo2Vtbl_GetImplTypeCustData lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
BOOL WriteConsoleOutputA(HANDLE hConsoleOutput, ITypeInfo2Vtbl_GetDocumentation2 lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
BOOL WriteConsoleOutputAttribute(HANDLE hConsoleOutput, ITypeInfo2Vtbl_GetAllCustData lpAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
BOOL WriteConsoleOutputCharacterA(HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
BOOL WriteConsoleOutputCharacterW(HANDLE hConsoleOutput, LPCWSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
BOOL WriteConsoleOutputW(HANDLE hConsoleOutput, ITypeInfo2Vtbl_GetDocumentation2 lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
BOOL WriteConsoleW(HANDLE hConsoleOutput, PVOID64 lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
BOOL WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
BOOL WriteFileEx(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
BOOL WriteFileGather(HANDLE hFile, ITypeInfoVtbl_Release aSegmentArray, DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
BOOL WritePrivateProfileSectionA(LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
BOOL WritePrivateProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
BOOL WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
BOOL WritePrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
BOOL WritePrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
BOOL WritePrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
BOOL WriteProcessMemory(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, struct _LIST_ENTRY lpNumberOfBytesWritten);
BOOL WriteProfileSectionA(LPCSTR lpAppName, LPCSTR lpString);
BOOL WriteProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString);
BOOL WriteProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
BOOL WriteProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
DWORD WriteTapemark(HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, BOOL bImmediate);
BOOL ZombifyActCtx(HANDLE hActCtx);
wchar_t _hread(HFILE hFile, LPVOID lpBuffer, wchar_t lBytes);
wchar_t _hwrite(HFILE hFile, LPCCH lpBuffer, wchar_t lBytes);
HFILE _lclose(HFILE hFile);
HFILE _lcreat(LPCSTR lpPathName, wchar_t iAttribute);
LONG _llseek(HFILE hFile, LONG lOffset, wchar_t iOrigin);
HFILE _lopen(LPCSTR lpPathName, wchar_t iReadWrite);
UINT _lread(HFILE hFile, LPVOID lpBuffer, UINT uBytes);
UINT _lwrite(HFILE hFile, LPCCH lpBuffer, UINT uBytes);
LPSTR lstrcatA(LPSTR lpString1, LPCSTR lpString2);
LPWSTR lstrcatW(LPWSTR lpString1, LPCWSTR lpString2);
wchar_t lstrcmpA(LPCSTR lpString1, LPCSTR lpString2);
wchar_t lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2);
wchar_t lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2);
wchar_t lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2);
LPSTR lstrcpyA(LPSTR lpString1, LPCSTR lpString2);
LPWSTR lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2);
LPSTR lstrcpynA(LPSTR lpString1, LPCSTR lpString2, wchar_t iMaxLength);
LPWSTR lstrcpynW(LPWSTR lpString1, LPCWSTR lpString2, wchar_t iMaxLength);
wchar_t lstrlenA(LPCSTR lpString);
wchar_t lstrlenW(LPCWSTR lpString);
''';