%{
part of macro_processor.internal.parsers.expression_parser;

Expression _buildBinary(Expression first, List rest) {
  Expression builder(Expression result, List element) {
    return new BinaryExpression(left: result, operator: element[0], position: result.position, right: element[1]);
  };
  return _buildTree(first, rest, builder);        
}

Expression _buildTree(Expression first, List rest, builder(Expression result, List rest)) {
  var result = first;    
  for (var i = 0; i < rest.length; i++) {
    result = builder(result, rest[i]);
  }
  return result;
}

Expression _conditional(Expression condition, Expression success, Expression fail, int position) {  
  return new ConditionalExpression(condition: condition, success: success, fail: fail, position: position);
}

int _escape(String ch) {
  switch(ch) {
    case "a":
      return 0x07;
    case "b":
      return 0x08;
    case "f":
      return 0x0c;
    case "n":
      return 0x0a;
    case "r":
      return 0x0d;
    case "t":
      return 0x09;
    case "v":
      return 0x0b;
    case "\'":
      return 0x27;
    case "\"":
      return 0x22;
    case "\?":
      return 0x3f;
    case "\\":
      return 0x5c;
    default:
      throw new StateError("Unknown escape sequence: \\$ch");  
  }
}

FloatingPointLiteral _floatLiteral(String source, int position) {
  var value = _parserFloat(source);
  return new FloatingPointLiteral(position: position, text: source, value: value);
}

double _parserFloat(String source) {
  source = source.toLowerCase();
  var hex = false;
  if (source.startsWith("0x")) {
    source = source.substring(2);
    hex = true;
  }
  var length = source.length;
  var endsWith = source[length - 1];
  if (endsWith == "f" || endsWith == "l") {
    source = source.substring(0, length - 1);
  }
  if (!hex) {
    return double.parse(source);
  }
  var index = source.indexOf("p");
  var exponent = int.parse(source.substring(index + 1));
  source = source.substring(0, index);
  index = source.indexOf(".");
  int integer = 0;
  int fractional = 0;
  if (index == 0) {
    fractional = int.parse(source.substring(1), radix: 16);
  } else if (index > 0) {
    integer = int.parse(source.substring(0, index), radix: 16);
    fractional = int.parse(source.substring(index + 1), radix: 16);
  } else {
    integer = int.parse(source, radix: 16);
  }
  var d = double.parse(".$fractional") * .625;
  return (integer + d) * pow(2, exponent);
}

StringLiteral _stringLiteral(String source, List<int> characters, int position) {
  var value = "";
  if (characters != null) {
    value = new String.fromCharCodes(characters);
  }    
  return new StringLiteral(position: position, text: source, value: value);
}

SourceLine _sourceLine(List<SourceFragment> fragments, SourceFragment last, int position) {
  if (last != null) {
    fragments.add(last);
  }
  return new SourceLine(fragments: fragments, position: position); 
}

Expression _unary(String operator, Expression operand, int position) {  
  return new UnaryExpression(operand: operand, operator: operator, position: position);
}

}%

### Sentences (nonterminals) ###

constant_expression <-
  conditional_expression

conditional_expression <-
  logical_or_expression question_mark expression semicolon conditional_expression { $$ = _conditional($1, $3, $5, $start); }
  / logical_or_expression

logical_or_expression <-
  logical_and_expression (vertical_line2 logical_and_expression)* { $$ = _buildBinary($1, $2); }

logical_and_expression <-
  inclusive_or_expression (ampersand2 inclusive_or_expression)* { $$ = _buildBinary($1, $2); }

inclusive_or_expression <-
  exclusive_or_expression (vertical_line exclusive_or_expression)* { $$ = _buildBinary($1, $2); }

exclusive_or_expression <-
  and_expression (xor and_expression)* { $$ = _buildBinary($1, $2); }

and_expression <-
  equality_expression (ampersand equality_expression)* { $$ = _buildBinary($1, $2); }

equality_expression <-
  relational_expression (equality_operator relational_expression)* { $$ = _buildBinary($1, $2); }

relational_expression <-
  shift_expression (relational_operator shift_expression)* { $$ = _buildBinary($1, $2); }

shift_expression <-
  additive_expression (shift_operator additive_expression)* { $$ = _buildBinary($1, $2); }

additive_expression <-
  multiplicative_expression (additive_operator multiplicative_expression)* { $$ = _buildBinary($1, $2); }

multiplicative_expression <-
  unary_expression (multiplicative_operator unary_expression)* { $$ = _buildBinary($1, $2); }

unary_expression <-
  primary_expression
  / unary_operator unary_expression { $$ = _unary($1, $2, $start); }

primary_expression <-
  defined
  / identifier
  / constant
  / lparen expression rparen { $$ = new ParenthesisExpression(expression: $2, position: $start); }

defined <-
  DEFINED lparen identifier rparen { $$ = new DefinedExpression(identifier: $3, position: $start); }

expression <-
  conditional_expression

eval_line <-
  constant_expression (new_line / eof) { $$ = $1; }

### Lexemes (tokens) ###

DEFINED <-
  'defined' spaces { $$ = $1; }

additive_operator <-
  plus
  / minus

ampersand <-
  '&' spaces { $$ = $1; }

ampersand2 <-
  '&&' spaces { $$ = $1; }

constant <-
  constant_base spaces2 { $$ = $1; }

eof <-
  !.

equality_operator <-
  eq
  / neq

identifier <-
  identifier_base spaces2 { $$ = $1; }

lparen <-
  '(' spaces { $$ = $1; }

multiplicative_operator <-
  asterisk
  / slash
  / percent

new_line <-
  '\r\n'
  / [\n\r]

question_mark <-
  '?' spaces { $$ = $1; }

relational_operator <-
  lt
  / gt
  / lte
  / gte

rparen <-
  ')' spaces { $$ = $1; }

semicolon <-
  ':' spaces { $$ = $1; }

shift_operator <-
  lsh
  / rsh

unary_operator <-
  plus
  / minus
  / tilde
  / exclamation

vertical_line <-
  '|' spaces { $$ = $1; }

vertical_line2 <-
  '||' spaces { $$ = $1; }

xor <-
  '^' spaces { $$ = $1; }

### Morphemes ###

asterisk <-
  '*' spaces { $$ = $1; }

binary_exponent_part <-
  ('p' / 'P') (sign / '') digit_sequence { $$ = _text(); }

c_char <-
  ![\n\r'\\] . { $$ = $2.codeUnitAt(0); }
  / escape_sequence

character_constant_base <-
  '\'' c_char '\'' { $$ = new CharacterLiteral(position: $start, text: _text(), value: $2); }
  / 'L\'' c_char '\'' { $$ = new CharacterLiteral(position: $start, text: _text(), value: $2); }

constant_base <-
  floating_constant_base
  / integer_constant_base
  / character_constant_base

decimal_constant <-
  nonzero_digit decimal_constant1 { $$ = int.parse(_text()); }

decimal_constant1 <-
  digit decimal_constant1
  / ''

decimal_floating_constant <-
  decimal_floating_constant_base spaces2 { $$ = $1; }

decimal_floating_constant_base <-
  fractional_constant exponent_part? floating_suffix? { $$ = _floatLiteral(_text(), $start); }
  / digit_sequence exponent_part floating_suffix? { $$ = _floatLiteral(_text(), $start); }

digit <-
  [0-9]

digit_sequence <-
  digit+ { $$ = _text(); }

eq <-
  '==' spaces { $$ = $1; }

escape_sequence <-
  simple_escape_sequence
  / octal_escape_sequence
  / hexadecimal_escape_sequence
  / universal_character_name

exclamation <-
  '!' spaces { $$ = $1; }

exponent_part <-
  ('e' / 'E') (sign / '') digit_sequence { $$ = _text(); }

floating_constant_base <-
  decimal_floating_constant
  / hexadecimal_floating_constant

floating_suffix <-
  [FLfl]

fractional_constant <-
  digit_sequence? '.' digit_sequence { $$ = _text(); }
  / digit_sequence '.' { $$ = _text(); }

gt <-
  '>' spaces { $$ = $1; }

gte <-
  '>=' spaces { $$ = $1; }

hex_quad <-
  hexadecimal_digit hexadecimal_digit hexadecimal_digit hexadecimal_digit { $$ = _text(); }

hexadecimal_constant <-
  hexadecimal_prefix hexadecimal_digit hexadecimal_constant1 { $$ = int.parse(_text(2), radix: 16); }

hexadecimal_constant1 <-
  hexadecimal_digit hexadecimal_constant1
  / ''

hexadecimal_digit <-
  [0-9A-Fa-f]

hexadecimal_digit_sequence <-
  hexadecimal_digit+ { $$ = _text(); }

hexadecimal_escape_sequence <-
  '\\x' hexadecimal_digit hexadecimal_escape_sequence1 { $$ = int.parse(_text(2), radix: 16); }

hexadecimal_escape_sequence1 <-
  hexadecimal_digit hexadecimal_escape_sequence1 { $$ = _text(); }
  / ''

hexadecimal_floating_constant <-
  hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part floating_suffix? { $$ = _floatLiteral(_text(), $start); }
  / hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part floating_suffix? { $$ = _floatLiteral(_text(), $start); }

hexadecimal_fractional_constant <-
  hexadecimal_digit_sequence? '.' hexadecimal_digit_sequence
  / hexadecimal_digit_sequence '.'

hexadecimal_prefix <-
  '0x'
  / '0X'

identifier_base <-
  identifier_nondigit identifier_base1 { $$ = new Identifier(name: _text(), position: $start); }

identifier_base1 <-
  identifier_nondigit identifier_base1 { $$ = _text(); }
  / digit identifier_base1 { $$ = _text(); }
  / ''

identifier_nondigit <-
  nondigit
  / universal_character_name

integer_constant_base <-
  decimal_constant integer_suffix? { $$ = new IntegerLiteral(position: $start, text: _text(), value: $1); }
  / hexadecimal_constant integer_suffix? { $$ = new IntegerLiteral(position: $start, text: _text(), value: $1); }
  / octal_constant integer_suffix? { $$ = new IntegerLiteral(position: $start, text: _text(), value: $1); }

integer_suffix <-
  unsigned_suffix long_long_suffix
  / unsigned_suffix long_suffix?
  / long_long_suffix unsigned_suffix?
  / long_suffix unsigned_suffix?

long_long_suffix <-
  'll'
  / 'LL'

long_suffix <-
  [Ll]

lsh <-
  '<<' spaces { $$ = $1; }

lt <-
  '<' spaces { $$ = $1; }

lte <-
  '<=' spaces { $$ = $1; }

minus <-
  '-' spaces { $$ = $1; }

neq <-
  '!=' spaces { $$ = $1; }

nondigit <-
  [A-Z_a-z]

nonzero_digit <-
  [1-9]

octal_constant <-
  '0' octal_constant1 { $$ = int.parse(_text(), radix: 8); }

octal_constant1 <-
  octal_digit octal_constant1
  / ''

octal_digit <-
  [0-7]

octal_escape_sequence <-
  '\\' octal_digit octal_digit octal_digit { $$ = int.parse(_text(1), radix: 8); }
  / '\\' octal_digit octal_digit { $$ = int.parse(_text(1), radix: 8); }
  / '\\' octal_digit { $$ = int.parse($2, radix: 8); }

percent <-
  '%' spaces { $$ = $1; }

plus <-
  '+' spaces { $$ = $1; }

rsh <-
  '<<' spaces { $$ = $1; }

sign <-
  [+\-]

simple_escape_sequence <-
  [\\] ["'?\\a-bfnrtv] { $$ = _escape($1); }

slash <-
  '/' spaces { $$ = $1; }

spaces <-
  [\t ]* { $$ = _text(); }

spaces2 <-
  spaces

tilde <-
  '~' spaces { $$ = $1; }

universal_character_name <-
  '\\U' hex_quad hex_quad { $$ = int.parse(_text(2), radix: 16); }
  / '\\u' hex_quad { $$ = int.parse(_text(2), radix: 16); }

unsigned_suffix <-
  [Uu]

